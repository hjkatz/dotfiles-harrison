#!/bin/zsh

# Echos out with color for better visual feedback
# Called:
#   `color_echo red "My Error"`
#   `color_echo yellow "My Warning"`
#   `color_echo green "My Success"`
function color_echo () {
    case $1 in
     red)    color="1;31" ;;
     green)  color="1;32" ;;
     yellow) color="1;33" ;;
     blue)   color="1;34" ;;
     purple) color="1;35" ;;
     cyan)   color="1;36" ;;
     *)      color=$1 ;;
    esac
    shift
    echo -e "\033[${color}m$@\033[0m"
}

FLAG=""
NO_FORWARD=false

if [ $# -eq 0 ] ; then
    color_echo red "❌ Missing hostname argument"
    exit 1
fi

# Parse commandline arguments
while [ $# -gt 0 ]
do
      arg="$1"
      case "$arg" in
         --no-forward) NO_FORWARD=true; ;;
         -*) FLAG="$FLAG $1"; ;; # add flag
         *) break;; # not option, its some argument
       esac
       shift
done

if [[ -f ~/.ssh/config ]] ; then
    # Parse .ssh/config and find print user@hostname:port info

    # Config parser written in awk, prints out lines like
    #     host:hostname:port:user
    ssh_config_parser_awk='
{ IGNORECASE = 1; } # turn on case insensitivity
/\<Host\>/ {
    host = $2;
    next;
}
/\<HostName\>/ {
    hostname = $2;
    next;
}
/\<Port\>/ {
    port = $2;
    next;
}
/\<User\>/ {
    user = $2;
    next;
}
/\<IdentityFile\>/ {
    printf "%s:%s:%s:%s\n", host, hostname, port, user;
    host     = "";
    hostname = "";
    port     = "";
    user     = "";
    next;
}
/.*/ { next; } # default
'

    # Parse the config
    ssh_config_parsed=`awk $ssh_config_parser_awk ~/.ssh/config | sort | uniq`
    ssh_config_match=`echo "$ssh_config_parsed" | grep -P "^\\Q$1\\E:"`

    # Check for a match in the config
    if [[ -n "$ssh_config_match" ]] ; then
        # Match exists in SSH config
        user=`echo "$ssh_config_match" | cut -d: -f4`
        port=`echo "$ssh_config_match" | cut -d: -f3`
        hostname=`echo "$ssh_config_match" | cut -d: -f2`

        echo "────────────────────────────────────"
        color_echo purple "🌐 SSH Remote Connection"
        echo "────────────────────────────────────"
        
        # Print connection details in aligned format
        if [[ -n "$user" ]] && [[ -n "$port" ]] ; then
            echo "   Host      : $hostname"
            echo "   User      : $user"
            echo "   Port      : $port"
            target="$user@$hostname:$port"
        elif [[ -n "$user" ]] && [[ -z "$port" ]] ; then
            echo "   Host      : $hostname"
            echo "   User      : $user"
            target="$user@$hostname"
        elif [[ -z "$user" ]] && [[ -n "$port" ]] ; then
            echo "   Host      : $hostname"
            echo "   Port      : $port"
            target="$hostname:$port"
        elif [[ -z "$user" ]] && [[ -z "$port" ]] ; then
            echo "   Host      : $hostname"
            target="$hostname"
        else
            color_echo red "❌ Configuration error"
            exit 1
        fi
        color_echo blue "🚀 Connecting to $target"
    else
        # No match found in config, print whatever was passed in
        color_echo blue "🚀 Connecting to $1"
    fi
else
    # No ssh config, print whatever was passed in
    color_echo blue "🚀 Connecting to $1"
fi

REMOTE_DOTFILES='~/.dotfiles-harrison/'

# Check for out of date dotfiles on remote server
if ssh $1 "[[ ! -f $REMOTE_DOTFILES/VERSION ]] || cat $REMOTE_DOTFILES/VERSION | grep -v -q -E '^$DOTFILES_VERSION'" ; then
    echo
    echo "📦 Syncing dotfiles to remote server..."

    # Construct a list of excluded files for the tar transfer
    tar_exclude_list=(
        '.git/*'
        '.gitignore'
        '.last_updated_at'
        '.plugin_list'
        '.vim/*'
        '.viminfo'
        '*.swp'
        '.zcompdump*'
        '*.md'
        'compiled/*'
        'zsh-syntax-highlighting/docs/*'
        'zsh-syntax-highlighting/images/*'
        'zsh-syntax-highlighting/tests/*'
        'zsh-syntax-highlighting/**/test-data*'
        'zsh-syntax-highlighting/Makefile'
    )

    # Add tar flags as an array of separate arguments because tar is picky...
    tar_excludes=()
    for exclude in $tar_exclude_list ; do
        tar_excludes+='--exclude'
        tar_excludes+="$exclude"
    done

    # Transfer dotfiles to remote server using tar over SSH
    tar c -C${HOME} --gzip ${tar_excludes} .dotfiles-harrison | ssh $1 'tar mxz -C${HOME} --no-same-owner --overwrite --dereference'
    color_echo green "✅ Updated to $DOTFILES_VERSION"
    echo
fi

# TODO: maybe check if zsh is installed and if not install it? Or return an error?

# Connect to remote server with dotfiles environment
if [ $NO_FORWARD = true ] ; then
    # Connect without SSH agent forwarding
    ssh $FLAG -t $1 "export ZDOTDIR=$REMOTE_DOTFILES ; zsh"
else
    # Connect with SSH agent forwarding (default)
    ssh $FLAG -A -t $1 "export ZDOTDIR=$REMOTE_DOTFILES ; zsh"
fi
