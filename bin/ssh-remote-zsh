#!/bin/zsh

# echos out with color
#
# Called:
#   `color_echo red "My Error"`
#   `color_echo yellow "My Warning"`
#   `color_echo green "My Success"`
function color_echo () {
    case $1 in
     red)     
          color=31
          ;;
     green)
          color=32
          ;;
     yellow)
          color=33
          ;;
     *)  
          color=$1
          ;;
    esac

    # remove $1
    shift

    echo -e "\033[1;${color}m$@\033[0m"
}

FLAG=""
NO_FORWARD=false

if [ $# -eq 0 ] ; then
    color_echo red "Missing Hostname"
    exit 1
fi

# parse commandline
while [ $# -gt 0 ]
do
      arg="$1"
      case "$arg" in
         --no-forward) NO_FORWARD=true; ;;
         -*) FLAG="$FLAG $1"; ;; # add flag
         *) break;; # not option, its some argument
       esac
       shift
done

if [[ -f ~/.ssh/config ]] ; then
    # parse .ssh/config and find print user@hostname:port info

    # config parser written in awk, prints out lines like
    #     host:hostname:port:user
    ssh_config_parser_awk='
{ IGNORECASE = 1; } # turn on case insensitivity
/\<Host\>/ {
    host = $2;
    next;
}
/\<HostName\>/ {
    hostname = $2;
    next;
}
/\<Port\>/ {
    port = $2;
    next;
}
/\<User\>/ {
    user = $2;
    next;
}
/\<IdentityFile\>/ {
    printf "%s:%s:%s:%s\n", host, hostname, port, user;
    host     = "";
    hostname = "";
    port     = "";
    user     = "";
    next;
}
/.*/ { next; } # default
'

    # parse the config
    ssh_config_parsed=`awk $ssh_config_parser_awk ~/.ssh/config`
    ssh_config_match=`echo "$ssh_config_parsed" | grep -P "^\\Q$1\\E:"`

    # check for a match in the config
    if [[ -n "$ssh_config_match" ]] ; then
        # match exists
        user=`echo "$ssh_config_match" | cut -d: -f4`
        port=`echo "$ssh_config_match" | cut -d: -f3`
        hostname=`echo "$ssh_config_match" | cut -d: -f2`

        # print correct parts if they exist (hostname will always exist)
        # print yellow then cyan using ansi color codes
        if [[ -n "$user" ]] && [[ -n "$port" ]] ; then
            color_echo yellow "Connecting to \033[1;36m$user@$hostname:$port\033[0m"
        elif [[ -n "$user" ]] && [[ -z "$port" ]] ; then
            color_echo yellow "Connecting to \033[1;36m$user@$hostname\033[0m"
        elif [[ -z "$user" ]] && [[ -n "$port" ]] ; then
            color_echo yellow "Connecting to \033[1;36m$hostname:$port\033[0m"
        elif [[ -z "$user" ]] && [[ -z "$port" ]] ; then
            color_echo yellow "Connecting to \033[1;36m$hostname\033[0m"
        else
            color_echo red "Impossible case"
        fi
    else
        # no match found in config, print whatever was passed in
        color_echo yellow "Connecting to \033[1;36m$1\033[0m"
    fi
else
    # no ssh config, print whatever was passed in
    color_echo yellow "Connecting to \033[1;36m$1\033[0m"
fi

# construct a list of excluded files for the tar transfer
tar_exclude_list=(
    '.plugin_list'
    '.vim/*'
    '.viminfo'
    '*.swp'
    '.zcompdump*'
    '*.md'
    'zsh-syntax-highlighting/docs/*'
    'zsh-syntax-highlighting/images/*'
    'zsh-syntax-highlighting/tests/*'
    'zsh-syntax-highlighting/**/test-data*'
    'zsh-syntax-highlighting/Makefile'
)

tar_excludes=()
# add tar flags as an array of separate arguments becuase tar is picky...
for exclude in $tar_exclude_list ; do
    tar_excludes+='--exclude'
    tar_excludes+="$exclude"
done

REMOTE_DOTFILES='~/.dotfiles-harrison/'

# check for out of date dotfiles on remote server
if ssh -A $1 "[[ ! -f $REMOTE_DOTFILES/VERSION ]] || cat $REMOTE_DOTFILES/VERSION | grep -v -q -P '^$DOTFILES_VERSION'" ; then
    color_echo yellow "Transferring files..."
    tar c -C${HOME} --gzip --exclude-vcs ${tar_excludes} .dotfiles-harrison | ssh $1 'tar mxz -C${HOME} --no-same-owner --overwrite --dereference'
    color_echo green "Updated to $DOTFILES_VERSION"
fi

# maybe check if zsh is installed and if not install it? Or return an error?

if [ $NO_FORWARD = true ] ; then
    ssh $FLAG -t $1 "export ZDOTDIR=$REMOTE_DOTFILES ; $(which zsh)"
else
    ssh $FLAG -A -t $1 "export ZDOTDIR=$REMOTE_DOTFILES ; $(which zsh)"
fi
