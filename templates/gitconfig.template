# git configuration to be shared across accounts
# vim: ft=gitconfig

[user]
    # personal information
	email = {{GIT_EMAIL}}
	name = {{GIT_NAME}}
    signingkey = {{GIT_GPG_SIGNINGKEY}}

[url "git@github.com:gemini"]
    insteadOf = https://github.com/gemini

[core]
    # fixes some filesystems that distinguish case, but don't ignore it
    ignorecase = false

	# use global gitattributes
	attributesFile = {{DOTFILES}}/gitattributes

    # don't screw with line endings
    autocrlf = input

    # use standard unix line endings "\n"
    eol = lf

[color]
    # turn on auto coloring
	ui = auto
	diff = auto
    branch = auto
    grep = auto
    status = auto

[column]
    # print output in columns ala ls
    ui = auto,column,nodense
    branch = auto,column,nodense
    tag = auto,column,nodense

[diff]
    # turn on rename and copy detection
    renames = copy

    # better diffs
    algorithm = histogram

[fetch]
    # auto prune refs that are no longer tracking remotes upon `git fetch`
    prune = true

[log]
    # show refs, heads, tags, remotes, etc... in log output
    decorate = auto

    # follow a single file through renames
    follow = true

[help]
    # use the suggested git command when misspelled after 1.0 seconds
	autocorrect = 10

[commit]
    # git commit --signed
    gpgsign = {{GIT_GPG_SIGN}}

[pull]
    # only pull fast-forwarded changes
    ff = only

[push]
    # push the current branch by default when given no arguments
	default = current

    # sign pushes with gpg key if asked (and surver supports it)
    gpgsign = if-asked

[merge]
    # set the default tool to vimdiff
    tool = vimdiff

[rebase]
    # autosquash commits starting with !fixup or !squash during git rebase
    autoSquash = true

[mergetool]
    # do not keep around the backup .orig files
    keepBackup = false

[status]
    # use short status
    short = true

    # show branch info in status
    branch = true

[rerere]
    # turn on merge memory
    enabled = true
    autoupdate = true

[tag]
    # default tag sorting to date authored desc
    sort = -taggerdate

    # git tag --signed
    gpgsign = {{GIT_GPG_SIGN}}

[grep]
    # default regex is perl
    patternType = perl

[alias]
    # git debug <git-command>
    debug  = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"

    # Quote / unquote a sh command, converting it to / from a git alias string
    # [see: https://stackoverflow.com/questions/38057261/git-config-alias-escaping/39616600#39616600]
    quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
    quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"

    # aliases for git things
	st = status
    stl = status --long
	co = checkout
    l = log --oneline
    lg = log --oneline --decorate --graph

	# default branch for the remote
	default-branch = !git symbolic-ref refs/remotes/origin/HEAD | sed 's|^refs/remotes/origin/||'
    current-branch = branch --show-current

    # custom history log
    history = log --pretty=format:'%C(yellow)%h%Creset %Cblue<%ae>%Creset %Cgreen(%cr)%Creset | %s %Cred%d%Creset' --graph --date=short
    hist = log --pretty=format:'%C(yellow)%h%Creset %Cblue<%ae>%Creset %Cgreen(%cr)%Creset | %s %Cred%d%Creset' --graph --date=short
    tree = log --all --graph --decorate --oneline
    stump = log --all --graph --decorate --oneline --simplify-by-decoration
    dag = log --graph --decorate --oneline
    oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-`git default-branch`}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    branch-point = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-`git default-branch`}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    cherry-dag = !bash -c 'git log --graph --decorate --oneline HEAD...$(git branch-point)'
    cdag = cherry-dag

	# git commit --fixup by latest matching commit
	fix = "!f() { git commit --fixup :/$1 ;}; f"

    # rebase without interactive and using --autosquash
    # [See: https://stackoverflow.com/questions/29094595/git-interactive-rebase-without-opening-the-editor]
    auto-rebase = "!f() { git fetch && GIT_SEQUENCE_EDITOR=: git rebase --autosquash -i origin/${1:-`git default-branch`} ; }; f"

    # prune local branches
    fresh = !git remote prune origin && git branch -vv | grep -E ': (gone|desaparecido)]' | awk '{print $1}' | xargs -r git branch -D
    my-branches = !git branch | grep hkatz

    # git go (go get) [See: https://regex101.com/r/0akEWc/2]
    # git clone <repo> into a path determined by the repo' domain, owner, and name
    # given repos like:
    #   https://bitbucket.org/some_owner/some_project.git
    #   git@bitbucket.org:some_owner/some_project.git
    #   https://hkatz@code.squarespace.net/scm/some_owner/some_project.git
    #   git@github.com:some_owner/some_project.git
    #   https://github.com/some_owner/some_project.git
    #
    # git go will properly call git clone <repo> /Some/path/to/code/<site>/<owner>/<project>/
    #
    # For example:
    #   git go ssh://git@code.squarespace.net:7999/some_owner/some_project.git
    # Becomes:
    #   git clone ssh://git@code.squarespace.net:7999/some_owner/some_project.git /Some/path/to/Code/code.squarespace.net/some_owner/some_project/
    go = "!f(){ git clone \"$1\" $(echo \"$1\"|perl -pe 's{^(https?|git|ssh)(://|@)(?:[^@/:]+@)?([^/:]+)[/:](?:scm|\\d+)?/?([^/:]+)/(.+?)(.git)?$}{{{GIT_CODE_DIR}}/\\3/\\4/\\5}');};f"

    format = !bash -c './gradlew format && git commit -am "Formatting"'

    co-release = !bash -c 'git checkout -b $USER/release-$(date +%s) origin/release'
    release = !bash -c 'git fetch && git co-release'
    release-master = !bash -c 'git release && git merge origin/master && git push origin HEAD && git pr-release && git checkout master && git pull'
    release-main = !bash -c 'git release && git merge origin/main && git push origin HEAD && git pr release main && git checkout main && git pull'
    pr = "!f() { to=${1:-`git default-branch`} ; from=${2:-`git current-branch`} ; repo=$(basename `git rev-parse --show-toplevel`) ; open \"https://github.com/sqsp/${repo}/compare/${to}...${from}?expand=1\" ; }; f"
    pr-release = pr release
    pr-master = pr master
