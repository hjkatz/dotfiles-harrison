# git configuration to be shared across accounts
# vim: ft=gitconfig

[user]
    # personal information
	email = {{GIT_EMAIL}}
	name = {{GIT_NAME}}
    #commented out for now, not needed for ssh-key signing
    #signingkey = {{GIT_GPG_SIGNINGKEY}}

[url "git@github.com:duolingo"]
    insteadOf = https://github.com/duolingo

[gpg]
    format = ssh

[gpg "ssh"]
    defaultKeyCommand = {{DOTFILES}}/bin/git-ssh-key.sh
    allowedSignersFile = {{DOTFILES}}/.git_allowed_signers

[includeIf "gitdir/i:~/Code/github.com/duolingo/**"]
    path = ~/.duo.gitconfig

[init]
    defaultBranch = main

    # enable pre-commit by default
    templateDir = ~/.git-template

[core]
    # fixes some filesystems that distinguish case, but don't ignore it
    ignorecase = false

	# use global gitattributes
	attributesFile = {{DOTFILES}}/gitattributes

    # don't screw with line endings
    autocrlf = input

    # use standard unix line endings "\n"
    eol = lf

    # performance: preload index for faster operations
    preloadindex = true

    # performance: use filesystem monitor when available
    fsmonitor = true

    # performance: enable untracked cache
    untrackedCache = true

[color]
    # turn on auto coloring
	ui = auto
	diff = auto
    branch = auto
    grep = auto
    status = auto

[column]
    # print output in columns ala ls
    ui = auto,column,nodense
    branch = auto,column,nodense
    tag = auto,column,nodense

[diff]
    # turn on rename and copy detection
    renames = copy

    # better diffs
    algorithm = histogram

[fetch]
    # auto prune refs that are no longer tracking remotes upon `git fetch`
    prune = true

    # performance: run fetch operations in parallel
    parallel = 0

    # enable partial clone support
    filterBlobLimit = 512k

[log]
    # show refs, heads, tags, remotes, etc... in log output
    decorate = auto

    # follow a single file through renames
    follow = true

[help]
    # use the suggested git command when misspelled after 1.0 seconds
	autocorrect = 10

[commit]
    # git commit --signed
    gpgsign = {{GIT_GPG_SIGN}}

    # add the full diff into $EDITOR when writing a message
    verbose = true

[pull]
    # only pull fast-forwarded changes
    ff = only

[push]
    # push the current branch by default when given no arguments
	default = current

    # sign pushes with gpg key if asked (and surver supports it)
    gpgsign = if-asked

    # automatically run `git push -u` to set upstream tracking branch if none is configured during a push
    autoSetupRemote = true

[merge]
    # set the default tool to nvimdiff
    tool = nvimdiff

    # even better diffs
    conflictStyle = diff3

[rebase]
    # autosquash commits starting with !fixup or !squash during git rebase
    autoSquash = true

    # stash push/pop during rebase
    autoStash = true

[mergetool]
    # do not keep around the backup .orig files
    keepBackup = false

[status]
    # use short status
    short = true

    # show branch info in status
    branch = true

[rerere]
    # turn on merge memory
    enabled = true
    autoupdate = true

[maintenance]
    # enable background maintenance
    auto = false
    strategy = incremental

[gc]
    # performance: enable multipack bitmaps
    writeBitmaps = true

    # performance: automatically run gc when needed
    auto = 6700

[tag]
    # default tag sorting to date authored desc
    sort = -taggerdate

    # git tag --signed
    gpgsign = {{GIT_GPG_SIGN}}

[grep]
    # default regex is perl
    patternType = perl

[alias]
    # MODERN GIT COMMANDS (prefer these over checkout)
    sw = switch
    swc = switch -c
    swd = switch --detach
    rs = restore
    rss = restore --staged

    # ENHANCED SHORTCUTS
    a = add
    aa = add -A
    ap = add -p
    c = commit
    ca = commit -a
    cm = commit -m
    cam = commit -am
    co = checkout
    cob = checkout -b
    b = branch
    ba = branch -a
    bd = branch -d
    bD = branch -D
    f = fetch
    fa = fetch --all
    m = merge
    p = push
    pf = push --force-with-lease
    pl = pull
    r = reset
    rh = reset --hard
    rs = reset --soft
    s = status -sb

    # git debug <git-command>
    debug  = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"

    # Quote / unquote a sh command, converting it to / from a git alias string
    # [see: https://stackoverflow.com/questions/38057261/git-config-alias-escaping/39616600#39616600]
    quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
    quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"

    # aliases for git things
	st = status
    stl = status --long
	co = checkout
    l = log --oneline
    lg = log --oneline --decorate --graph
    ds = diff --staged
    amend = commit --amend --no-edit
    ammend = amend --no-edit
    amend-all = commit -a --amend --no-edit

	# default branch for the remote
	default-branch = !git symbolic-ref refs/remotes/origin/HEAD | sed 's|^refs/remotes/origin/||'
    current-branch = branch --show-current

    # custom history log
    history = log --pretty=format:'%C(yellow)%h%Creset %Cblue<%ae>%Creset %Cgreen(%cr)%Creset | %s %Cred%d%Creset' --graph --date=short
    hist = log --pretty=format:'%C(yellow)%h%Creset %Cblue<%ae>%Creset %Cgreen(%cr)%Creset | %s %Cred%d%Creset' --graph --date=short
    tree = log --all --graph --decorate --oneline
    stump = log --all --graph --decorate --oneline --simplify-by-decoration
    dag = log --graph --decorate --oneline
    # list branch-point from current branch to default branch (master)
    branch-point = !bash -c 'git merge-base "origin/${1:-`git default-branch`}" "${2:-HEAD}"'
    # list branches that are travesable from HEAD -> default-branch (master)
    cherry-list-branches = "!f() { git log --format='%(decorate:prefix=,suffix=,separator=:,pointer=/,tag=)' HEAD...$(git branch-point) | grep -v '^$' | cut -d: -f1 | sed 's;origin/;;' ; }; f"
    # find the closest (immediate parent) branch name that is travesable from HEAD -> default-branch (master)
    parent-branch = "!f() { out=$(git cherry-list-branches | grep -Po '(HEAD/)?\\K.*' -A1 | head -n2 | tail -n1) ; echo \"$out\" ; }; f"
    # list commits traversable from current branch HEAD -> default branch (master)
    cherry-dag = !bash -c 'git log --graph --decorate --oneline HEAD...$(git branch-point)'
    cdag = cherry-dag
    # list commits traversable from current branch HEAD -> parent branch
    parent-dag = !bash -c 'git log --graph --decorate --oneline HEAD...$(git parent-branch)'
    pdag = parent-dag
    # rebase cdag
    rebase-cdag  = !bash -c 'git rebase -i $(git branch-point)'
    rdag = rebase-cdag # default all rebasing to branch-point
    rcdag = rebase-cdag
    # rebase pdag
    rebase-pdag  = !bash -c 'git rebase -i $(git parent-branch)'
    rpdag = rebase-pdag
    # diff pdag
    diff-cdag = !bash -c 'git rev-list HEAD...$(git branch-point) | git -p diff-tree --stdin --format=medium -p'
    diff-pdag = !bash -c 'git rev-list HEAD...$(git parent-branch) | git -p diff-tree --stdin --format=medium -p'
    # default all diffs to branch-point
    ddag = diff-cdag
    ddagc = diff-cdag
    ddagp = diff-pdag

    # find commit matching regex message
    find = !bash -c 'git show HEAD^{/$*}'
	# git commit --fixup by latest matching commit
    fix = !bash -c 'git commit --fixup HEAD^{/$*}'

    # rebase without interactive and using --autosquash
    # [See: https://stackoverflow.com/questions/29094595/git-interactive-rebase-without-opening-the-editor]
    auto-rebase = "!f() { git fetch && GIT_SEQUENCE_EDITOR=: git rebase --autosquash -i origin/${1:-`git default-branch`} ; }; f"

    # prune local branches
    fresh = !git remote prune origin && git branch -vv | grep -E ': (gone|desaparecido)]' | awk '{print $1}' | xargs -r git branch -D
    my-branches = !git branch | grep hkatz

    # git go (go get) [See: https://regex101.com/r/0akEWc/2]
    # git clone <repo> into a path determined by the repo' domain, owner, and name
    # given repos like:
    #   https://bitbucket.org/some_owner/some_project.git
    #   git@bitbucket.org:some_owner/some_project.git
    #   https://hkatz@code.squarespace.net/scm/some_owner/some_project.git
    #   git@github.com:some_owner/some_project.git
    #   https://github.com/some_owner/some_project.git
    #
    # git go will properly call git clone <repo> /Some/path/to/code/<site>/<owner>/<project>/
    #
    # For example:
    #   git go ssh://git@code.squarespace.net:7999/some_owner/some_project.git
    # Becomes:
    #   git clone ssh://git@code.squarespace.net:7999/some_owner/some_project.git /Some/path/to/Code/code.squarespace.net/some_owner/some_project/
    go = "!f(){ git clone \"$1\" $(echo \"$1\"|perl -pe 's{^(https?|git|ssh)(://|@)(?:[^@/:]+@)?([^/:]+)[/:](?:scm|\\d+)?/?([^/:]+)/(.+?)(.git)?$}{{{GIT_CODE_DIR}}/\\3/\\4/\\5}');};f"

    co-release = !bash -c 'git checkout -b $USER/release-$(date +%s) origin/release'
    release = !bash -c 'git fetch && git co-release'
    release-master = !bash -c 'git release && git merge origin/master && git push origin HEAD && git pr-release && git checkout master && git pull'
    release-main = !bash -c 'git release && git merge origin/main && git push origin HEAD && git pr release main && git checkout main && git pull'
    pr = "!f() { to=${1:-`git default-branch`} ; from=${2:-`git current-branch`} ; repo=$(basename `git rev-parse --show-toplevel`) ; tracking=`git branch -vv --no-color --remotes -l $from` ; [[ -z $tracking ]] && echo 'Pushing branch for tracking...' && git push ; open \"https://github.com/{{GIT_ORG}}/${repo}/compare/${to}...${from}?expand=1\" ; }; f"
    pr-release = pr release
    pr-master = pr master
    pr-main = pr main

    trigger-ci = "!f() { git commit --allow-empty -m 'trigger ci' && git push ; }; f"

    # GRAPHITE-CLI INTEGRATION AND STACK-AWARE ALIASES
    # Enhanced branch management that works with graphite stacks
    stack-branches = !git branch --format='%(refname:short)' | grep -v "^$(git default-branch)$" | head -10
    stack-status = !git log --oneline --graph $(git default-branch)..HEAD
    stack-diff = !git diff $(git default-branch)...HEAD
    stack-fixup = !bash -c 'git add -A && git commit --fixup HEAD~${1:-0}'

    # Maintenance helpers
    maintenance-start = maintenance start
    maintenance-stop = maintenance stop
    tidy = !git for-each-ref --format='%(refname:short)' refs/heads | xargs -r git branch -d 2>/dev/null || true

    # Enhanced stash operations
    stash-staged = stash push --staged
    stash-unstaged = stash push --keep-index
    stash-untracked = stash push --include-untracked
    stash-all = stash push --include-untracked --all

    # Better log views
    ll = log --oneline --graph --decorate -10
    recent = for-each-ref --sort=-committerdate --count=10 --format='%(refname:short) - %(committerdate:relative) - %(authorname)'
    authors = shortlog -sn

    # File-level operations
    untrack = rm --cached
    tracked = ls-tree -r --name-only HEAD

    # Improved search
    find-file = "!f() { git ls-files | grep -i \"$1\"; }; f"
    find-text = "!f() { git grep -n \"$1\"; }; f"

    # Safety helpers
    undo = reset --soft HEAD~1
    uncommit = reset --soft HEAD~1
    recommit = commit --amend --no-edit
